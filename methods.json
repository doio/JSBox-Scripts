{
  "$align": "[object Object]",
  "$layout": "[object Object]",
  "$data": "function () {\n    [native code]\n}",
  "$pval": "function () {\n    [native code]\n}",
  "$pageSize": "[object Object]",
  "$rect": "function () {\n    [native code]\n}",
  "$pvalStruct": "function () {\n    [native code]\n}",
  "$protocol": "function (r){var n=r.type,o=r.events,e=r.classEvents;return __logError(n,o,e)}",
  "__logTest": "[object Object]",
  "$assetMedia": "[object Object]",
  "__weak": "function () {\n    [native code]\n}",
  "global": "[object GlobalObject]",
  "$bridge_id": "function () {\n    [native code]\n}",
  "$defc": "function (func, params) {\n  __requireCFunction__(func, params);\n  global[func] = function() {\n    var args = Array.prototype.slice.call(arguments);\n    return __invokeCFunction__.apply(global, [func, args]);\n  }\n}",
  "$free": "function () {\n    [native code]\n}",
  "$insets": "function () {\n    [native code]\n}",
  "$delay": "function () {\n    [native code]\n}",
  "$labeledValue": "function () {\n    [native code]\n}",
  "$assignPointer": "function () {\n    [native code]\n}",
  "module": "[object Object]",
  "$cellInset": "15",
  "require": "function require(path) {\n\n  if (require.cache[path]) {\n    return require.cache[path].exports\n  }\n\n  var source = __include_library__(path)\n  var module = { exports: { } }\n  \n  try {\n    var execute = new Function('exports, module', source)\n    execute(module.exports, module)\n    require.cache[path] = module\n  } catch (error) {\n    error.path = path\n    throw error\n  }\n  \n  return module.exports\n}",
  "$size": "function () {\n    [native code]\n}",
  "setInterval": "function () {\n    [native code]\n}",
  "$transform": "[object NSBlock]",
  "$imgPicker": "[object Object]",
  "$memmove": "function () {\n    [native code]\n}",
  "$CFRetain": "function () {\n    [native code]\n}",
  "btoa": "function () {\n    [native code]\n}",
  "$props": "function (object) {\n  var result = []\n  for (; object != null; object = Object.getPrototypeOf(object)) {\n    var names = Object.getOwnPropertyNames(object)\n    for (var idx=0; idx<names.length; idx++) {\n      var name = names[idx]\n      if (result.indexOf(name) === -1) {\n        result.push(name)\n      }\n    }\n  }\n  return result\n}",
  "__nextThenable__": "function __nextThenable__(object, nextResolve, nextReject) {\n  object.then(function(result) {\n    nextResolve(result)\n  }, function(error) {\n    nextReject(error)\n  })\n}",
  "$objc_release": "function () {\n    [native code]\n}",
  "$l10n": "function () {\n    [native code]\n}",
  "__logDebug": "function () {\n    [native code]\n}",
  "__logError": "function () {\n    [native code]\n}",
  "$btnType": "[object Object]",
  "window": "[object Object]",
  "$memset": "function () {\n    [native code]\n}",
  "nsnull": "[object Object]",
  "$block": "function (args, cb) {\n  var that = this\n  var slf = global.self\n  if (args instanceof Function) {\n    cb = args\n    args = ''\n  }\n  var callback = function() {\n    var args = Array.prototype.slice.call(arguments)\n    global.self = slf\n    return cb.apply(that, __syncMain(args))\n  }\n  var ret = {args: args, cb: callback, argCount: cb.length, __isBlock: 1}\n  if (global.__nextIndex) {\n    ret['blockToken'] = global.__nextIndex(args, cb)\n  }\n  return ret\n}",
  "$point": "function () {\n    [native code]\n}",
  "$lineCap": "[object Object]",
  "__include_library__": "function () {\n    [native code]\n}",
  "__logInfo": "function () {\n    [native code]\n}",
  "$assignScalarTypePointer": "function () {\n    [native code]\n}",
  "$env": "[object Object]",
  "$malloc": "function () {\n    [native code]\n}",
  "$CFRelease": "function () {\n    [native code]\n}",
  "$struct": "function () {\n    [native code]\n}",
  "setTimeout": "function () {\n    [native code]\n}",
  "$mediaType": "[object Object]",
  "$font": "function () {\n    [native code]\n}",
  "$include": "function () {\n    [native code]\n}",
  "__logWarn": "function () {\n    [native code]\n}",
  "$lineJoin": "[object Object]",
  "$rgba": "function () {\n    [native code]\n}",
  "$sizeof": "function () {\n    [native code]\n}",
  "__syncMain": "function (r){if(void 0===r||null===r)return!1;if(\"object\"==typeof r){if(r.__obj)return r;if(r.__isNil)return!1}if(r instanceof Array)return o=[],r.forEach(function(r){o.push(n(r))}),o;if(r instanceof Function)return function(){for(var n=Array.prototype.slice.call(arguments),o=__logDebug(n),e=0;e<n.length;e++)null===n[e]||void 0===n[e]||!1===n[e]?o.splice(e,1,void 0):n[e]==nsnull&&o.splice(e,1,null);return __logVerb(r.apply(r,o))};if(r instanceof Object){var o={};for(var e in r)o[e]=n(r[e]);return o}return r}",
  "$": "function () {\n    [native code]\n}",
  "$range": "function () {\n    [native code]\n}",
  "clearInterval": "function () {\n    [native code]\n}",
  "$define": "function (n){var o=n.type,e=n.props,l=n.events,t=n.classEvents,s={},u={};e&&e.forEach(function(r){l[r]||(l[r]=_(r));var n=\"set\"+r.substr(0,1).toUpperCase()+r.substr(1);l[n]||(l[n]=c(r))});var f=o.split(\":\")[0].trim();a(l,s,f),a(t,u,f);var b=__logTrace(o,s,u),g=b.cls,p=b.superCls;if(r[g]={instMethods:{},clsMethods:{}},p.length&&r[p]){for(var v in r[p].instMethods)r[g].instMethods[v]=r[p].instMethods[v];for(var v in r[p].clsMethods)r[g].clsMethods[v]=r[p].clsMethods[v]}return i(g,l,1,f),i(g,t,0,f),$objc(g)}",
  "__requireCFunction__": "function () {\n    [native code]\n}",
  "__logInit": "function () {\n    [native code]\n}",
  "__logVerb": "function () {\n    [native code]\n}",
  "$kbType": "[object Object]",
  "__logFile": "function () {\n    [native code]\n}",
  "$contentMode": "[object Object]",
  "$rgb": "function () {\n    [native code]\n}",
  "$objc_retain": "function () {\n    [native code]\n}",
  "atob": "function () {\n    [native code]\n}",
  "__logAuth": "function () {\n    [native code]\n}",
  "__logTrace": "function () {\n    [native code]\n}",
  "JSBox": "[object BBGlobal]",
  "$pvalBool": "function () {\n    [native code]\n}",
  "__strong": "function () {\n    [native code]\n}",
  "__invokeCFunction__": "function () {\n    [native code]\n}",
  "$indexPath": "function () {\n    [native code]\n}",
  "block": "function (r,o){var e=this,l=global.self;r instanceof Function&&(o=r,r=\"\");var t={args:r,cb:function(){var r=Array.prototype.slice.call(arguments);return global.self=l,o.apply(e,n(r))},argCount:o.length,__isBlock:1};return global.__genBlock&&(t.blockObj=global.__genBlock(r,o)),t}",
  "__isFunction__": "function __isFunction__(func) {\n  return typeof(func) === \"function\"\n}",
  "$objc": "function (){for(var r,n=0;n<arguments.length;n++)arguments[n].split(\",\").forEach(function(n){r=t(n.trim())});return r}",
  "alert": "function () {\n    [native code]\n}",
  "$icon": "function () {\n    [native code]\n}",
  "$color": "function () {\n    [native code]\n}",
  "console": "[object BBConsole]",
  "$zero": "[object Object]",
  "__nextIndex": "function () {\n    [native code]\n}",
  "$getPointer": "function () {\n    [native code]\n}",
  "$memcpy": "function () {\n    [native code]\n}"
}