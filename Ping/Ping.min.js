"use strict"; Array.prototype.max = function () { return Math.max(...this); }; Array.prototype.min = function () { return Math.min(...this); }; Array.prototype.avg = function () { return this.reduce((partial, value) => (partial + value)) / this.length; }; function testPing(t) { $network.startPinging({ host: t, timeout: 2, period: 1, payloadSize: 1, ttl: 49, didReceiveReply: function (t) { hostIp = t.host, $network.stopPinging(), hostIp && ($("ip").text = hostIp, startPing(hostIp), getIpInfo(hostIp)) } }) } function startPing(t) { isRunning = !0, $("button").title = "Stop", $network.startPinging({ host: t, timeout: timeout, period: period, payloadSize: 24, ttl: 49, didReceiveReply: function (t) { rec++; var o = parseFloat((1e3 * t.rtt).toFixed(1)); rtts.push(o), update(o) }, didTimeout: function (t) { $ui.toast("Timeout", 1), loss++ }, didFail: function (t) { $ui.toast(t) }, didFailToSendPing: function (t) { $ui.toast("FailToSendPing") } }) } function getIpInfo(t) { $http.get({ url: "http://freeapi.ipip.net/" + t, handler: function (t) { var o = t.data; o instanceof Array && ($("ipInfo").text = o.join(" ")) } }) } function stopPing() { isRunning = !1, $("button").title = "Ping", $network.stopPinging() } function reset() { rtts = [], hostIp = void 0, offsetX = 0, ratio = 10, avg = 0, cvs.runtimeValue().invoke("setNeedsDisplay"), $("info").text = "", $("ip").text = "" } function drawLineGraph(t, o) { o.saveGState(), o.setAlpha(.9), o.strokeColor = $color("#08a4df"), o.moveToPoint(-10, H / 1.125 - rtts[0] * ratio), o.setLineWidth(4), o.setLineCap(1), o.setLineJoin(1), o.setShadow($size(1, 1), 3.3, $color("#999")); for (var e = 1; e < rtts.length; ++e)x = 10 * e + 10, o.addLineToPoint(x - offsetX, H / 1.125 - rtts[e] * ratio); max * ratio > H / 1.125 - 40 && (ratio *= .9), o.strokePath(), o.restoreGState() } function drawMinMaxLine(t, o) { o.saveGState(), o.setAlpha(.6), o.setLineWidth(2), o.strokeColor = $color("#ccc"), o.moveToPoint(0, H / 1.125 - min * ratio), o.addLineToPoint(W, H / 1.125 - min * ratio), o.moveToPoint(0, H / 1.125 - max * ratio), o.addLineToPoint(W, H / 1.125 - max * ratio), o.strokePath(), o.restoreGState() } function drawAvgLine(t, o) { o.saveGState(), o.setAlpha(.5), o.setLineWidth(2), o.strokeColor = $color("#8ce69c"), o.moveToPoint(0, H / 1.125 - avg * ratio), o.addLineToPoint(W, H / 1.125 - avg * ratio), o.strokePath(), o.restoreGState() } function drawStdRect(t, o) { var e = rtts.map(function (t) { return t - avg }), i = Math.sqrt(e.map(function (t) { return t * t }).reduce(function (t, o) { return t + o }) / (rtts.length - 1)); o.saveGState(), o.setAlpha(.1), o.fillColor = $color("#8ce69c"), o.fillRect($rect(0, H / 1.125 - avg * ratio - i * ratio * .5, W, i * ratio)), o.restoreGState() } function update(t) { avg = rtts.avg(), x > W - 10 && (offsetX += 10), min = rtts.min(), max = rtts.max(); var o = loss / (loss + rec); cvs.runtimeValue().invoke("setNeedsDisplay"), $("info").text = "NOW: " + t + " AVG:" + avg.toFixed(1) + "  MIN: " + min + "  MAX: " + max + "  LOSS: " + (100 * o).toFixed(2) + "%" } $network.stopPinging(); var width = $device.info.screen.width, period = .2, timeout = 2, W = void 0, H = void 0, ratio = 10, hostIp = void 0, rtts = [], x = 0, min = 0, max = 0, avg = 0, rec = 0, loss = 0, offsetX = 0, isRunning = !1; $app.keyboardToolbarEnabled = !0, $ui.render({ props: { title: "Ping" }, views: [{ type: "label", props: { id: "info", font: $font("ArialRoundedMTBold", 12), color: $color("#666"), bgcolor: $rgba(233, 233, 233, .8), align: $align.center }, layout: function (t) { t.bottom.inset(0), t.width.equalTo(width), t.height.equalTo(22) } }, { type: "label", props: { id: "ip", font: $font(18), color: $color("#777"), align: $align.center }, layout: function (t) { t.bottom.equalTo($("info").top).inset(10), t.width.equalTo(width), t.height.equalTo(30) } }, { type: "label", props: { id: "ipInfo", font: $font(16), text: "美国洛杉矶", color: $color("#777"), align: $align.center, autoFontSize: !0 }, layout: function (t) { t.bottom.equalTo($("ip").top).inset(0), t.width.equalTo(width), t.height.equalTo(30) } }, { type: "canvas", layout: $layout.fill, events: { draw: function (t, o) { W = t.frame.width, H = t.frame.height, rtts.length > 0 && (drawMinMaxLine(t, o), drawAvgLine(t, o), drawStdRect(t, o), drawLineGraph(t, o)) } } }, { type: "input", props: { placeholder: "请输入域名或IP", font: $font("ArialRoundedMTBold", 16), textColor: $color("#666"), align: $align.natural, type: $kbType.search, darkKeyboard: !0 }, layout: function (t, o) { t.right.equalTo(o.left).offset(-10), t.height.equalTo(30), t.top.inset(5), t.left.inset(10), t.right.inset(65) }, events: { didBeginEditing: function (t) { stopPing(), reset() } } }, { type: "button", props: { font: $font("ArialRoundedMTBold", 16), bgcolor: $rgba(100, 100, 100, .9), title: "Ping" }, layout: function (t, o) { var e = $("input"); t.bottom.height.equalTo(e), t.width.equalTo(55), t.left.equalTo(e.right).offset(5) }, events: { tapped: function () { testPing($("input").text.replace(/^\s*|\s*$/g, "")), isRunning && stopPing() } } }] }); var cvs = $("canvas");